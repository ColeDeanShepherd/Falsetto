@using Falsetto.Shared
@using Html;
@using static Html.HtmlHelpers.Elem;
@using static Html.HtmlHelpers.Attr;
@page "/"

<PageTitle>Index</PageTitle>

<Falsetto.Client.Html.CSharpComponent Node="RootNode" />

@code {
    private List<(NodeReference, NodeReference)> FlashCardSideReferences = null!;
    private List<(Html.Node, Html.Node)> FlashCards = null!;
    private Html.Node RootNode = null!;
    private uint? currentFlashCardIndex = null;
    private Random random = new();
    private bool isShowingFrontSide = true;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        List<(GuitarNote, GuitarNote)> FlashCardDatas =
            Enumerable.Range(1, 11)
                .Map(Convert.ToUInt32)
                .Repeat(5)
                .FlatMap((fretNumbers, i) =>
                    fretNumbers
                        .Map(fn => new GuitarNote(StringIndex: i, FretNumber: fn)))
                .Map(note0 => (note0, new GuitarNote(StringIndex: 5, FretNumber: 6)))
                .ToList();

        FlashCardSideReferences = FlashCardDatas
            .Map(_ => (new NodeReference(), new NodeReference()))
            .ToList();

        FlashCards =
            FlashCardDatas
                .Map((notes, index) =>
                {
                    (GuitarNote note0, GuitarNote note1) = notes;
                    (NodeReference frontSideRef, NodeReference backSideRef) = FlashCardSideReferences[(int)index];

                    Node frontSide =
                        Guitar.GuitarFretboard(
                            Attrs(Hidden()),
                            new List<GuitarNote>()
                                {
                                note0,
                                note1,
                                },
                            frontSideRef);

                    Node backSide = P(Attrs(Hidden()), Nodes(Text(Guitar.GetSimpleIntervalName(note0, note1))), backSideRef);

                    return (frontSide, backSide);
                })
                .ToList();

        RootNode =
            Div(Children:
                FlashCards
                    .FlatMap(sides => new[] { sides.Item1, sides.Item2 })
                .ToList()
                .Add(new[]
                {
                    Button(Attrs(Value("Flip"), OnClick(e => Flip()))),
                    Button(Attrs(Value("Next"), OnClick(e => Next()))),
                }));

        Next();
    }

    private Element GetFlashCardFrontSide(uint flashCardIndex) => FlashCards[(int)flashCardIndex].Item1.AsT1;
    private Element GetFlashCardBackSide(uint flashCardIndex) => FlashCards[(int)flashCardIndex].Item2.AsT1;

    private void SetIsVisible(Element element, bool value)
    {
        if (value)
        {
            element.Attributes?.Remove("hidden");
        }
        else
        {
            element.Attributes?.AddIfMissing(Hidden());
        }
    }

    private void Flip()
    {
        if (currentFlashCardIndex != null)
        {
            isShowingFrontSide = !isShowingFrontSide;

            SetIsVisible(GetFlashCardFrontSide(currentFlashCardIndex.Value), isShowingFrontSide);
            SetIsVisible(GetFlashCardBackSide(currentFlashCardIndex.Value), !isShowingFrontSide);

            StateHasChanged();
        }
    }

    private void Next()
    {
        if (currentFlashCardIndex != null)
        {
            SetIsVisible(GetFlashCardFrontSide(currentFlashCardIndex.Value), false);
            SetIsVisible(GetFlashCardBackSide(currentFlashCardIndex.Value), false);
        }

        currentFlashCardIndex = (uint)random.Next(FlashCards.Count);

        isShowingFrontSide = true;
        SetIsVisible(GetFlashCardFrontSide(currentFlashCardIndex.Value), isShowingFrontSide);

        StateHasChanged();
    }
}